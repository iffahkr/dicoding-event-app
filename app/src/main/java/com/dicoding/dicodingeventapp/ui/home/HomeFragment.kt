package com.dicoding.dicodingeventapp.ui.homeimport android.content.Intentimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.appcompat.app.AppCompatDelegateimport androidx.fragment.app.Fragmentimport androidx.fragment.app.viewModelsimport androidx.recyclerview.widget.LinearLayoutManagerimport com.dicoding.dicodingeventapp.databinding.FragmentHomeBindingimport com.dicoding.dicodingeventapp.ui.detail.DetailEventActivityimport com.dicoding.dicodingeventapp.ui.MainViewModelimport com.dicoding.dicodingeventapp.ui.ViewModelFactoryimport com.dicoding.dicodingeventapp.data.Resultimport com.dicoding.dicodingeventapp.ui.setting.SettingViewModelimport com.dicoding.dicodingeventapp.ui.setting.SettingViewModelFactoryclass HomeFragment : Fragment() {    private var _binding: FragmentHomeBinding? = null    private val viewModel: MainViewModel by viewModels {        ViewModelFactory.getInstance(requireActivity())    }    private lateinit var homeUpcomingAdapter: HomeUpcomingAdapter    private lateinit var homeFinishedAdapter: HomeFinishedAdapter    private val binding get() = _binding!!    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        _binding = FragmentHomeBinding.inflate(inflater, container, false)        val root: View = binding.root        return root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        // Upcoming        homeUpcomingAdapter = HomeUpcomingAdapter {            val intent = Intent(requireContext(), DetailEventActivity::class.java)            intent.putExtra(DetailEventActivity.KEY_EVENT, it)            startActivity(intent)        }        binding.rvHomeUpcoming.adapter        binding.rvHomeUpcoming.apply {            layoutManager =                LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)            adapter = homeUpcomingAdapter        }        viewModel.getUpcomingEvents().observe(viewLifecycleOwner) { result ->            if (result != null) {                when (result) {                    is Result.Loading -> {                        binding.progressBarUpcoming.visibility = View.VISIBLE                    }                    is Result.Success -> {                        binding.progressBarUpcoming.visibility = View.GONE                        val eventData = result.data                        homeUpcomingAdapter.submitList(eventData.take(5))                    }                    is Result.Error -> {                        binding.progressBarUpcoming.visibility = View.GONE                        Toast.makeText(                            requireContext(),                            "From home page something wrong " + result.error,                            Toast.LENGTH_SHORT                        ).show()                    }                }            }        }        viewModel.isLoadingUpcoming.observe(viewLifecycleOwner) {            showLoadingUpcoming(it)        }        // Finished        homeFinishedAdapter = HomeFinishedAdapter {            val intent = Intent(requireContext(), DetailEventActivity::class.java)            intent.putExtra(DetailEventActivity.KEY_EVENT, it)            startActivity(intent)        }        binding.rvHomeFinished.adapter        binding.rvHomeFinished.apply {            layoutManager =                LinearLayoutManager(requireContext(), LinearLayoutManager.VERTICAL, false)            adapter = homeFinishedAdapter        }        viewModel.getFinishedEvents().observe(viewLifecycleOwner) { result ->            if (result != null) {                when (result) {                    is Result.Loading -> {                        binding.progressBarFinished.visibility = View.VISIBLE                    }                    is Result.Success -> {                        binding.progressBarFinished.visibility = View.GONE                        val eventData = result.data                        homeFinishedAdapter.submitList(eventData.take(5))                    }                    is Result.Error -> {                        binding.progressBarUpcoming.visibility = View.GONE                        Toast.makeText(                            requireContext(),                            "From home page something wrong " + result.error,                            Toast.LENGTH_SHORT                        ).show()                    }                }            }        }        viewModel.isLoadingFinished.observe(viewLifecycleOwner) {            showLoadingFinished(it)        }    }    private fun showLoadingUpcoming(isLoading: Boolean) {        if (isLoading) {            binding.progressBarUpcoming.visibility = View.VISIBLE        } else {            binding.progressBarUpcoming.visibility = View.GONE        }    }    private fun showLoadingFinished(isLoading: Boolean) {        if (isLoading) {            binding.progressBarFinished.visibility = View.VISIBLE        } else {            binding.progressBarFinished.visibility = View.GONE        }    }    override fun onDestroyView() {        super.onDestroyView()        _binding = null    }}